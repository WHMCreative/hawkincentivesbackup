////
/// Framework - Custom Style Patterns
/// @group frameworkComponents
////

@mixin paragraph-margins($spacing: $paragraph-spacing) {
  @if type-of($spacing == map) {
    @each $bp, $size in $spacing {
      $size: rem-calc($size);
      @include breakpoint($bp) {
        @include top-bottom(margin, $size);
      }
    }
  }
}

@mixin paragraph-paddings($spacing: $paragraph-spacing) {
  @if type-of($spacing == map) {
    @each $bp, $size in $spacing {
      $size: rem-calc($size);
      @include breakpoint($bp) {
        @include top-bottom(padding, $size);
      }
    }
  }
}

@mixin insight-label($font-size: 11) {
  font-size: rem-calc($font-size);
  line-height: 2;
  padding: 2px 7px;
  background: rgba($black, 0.5);
  border-radius: 3px;
  color: $white;
}

/// Adds frame for teaser image
///
/// @param {string} $color - Frame's border color
/// @param {string} $size - Frame's border width, in px
/// @param {string} $offset - Frame's offset from top left corner of a teaser, in px
/// @param {string} $radius - Value of the frame's border radius, in px
/// @param {string} $pseudo-element - Element to use for adding the frame. Default value: after
/// @param {boolean} $animate - Animate frame's position on teaser active states. Default value: false
@mixin frame($color, $size, $offset, $radius, $pseudo-element: after, $animate: false, $z-index: 0) {
  position: relative;
  &:#{$pseudo-element} {
    content: '';
    position: absolute;
    left: $offset;
    top: $offset;
    width: 100%;
    height: 100%;
    border: $size solid $color;
    border-radius: $radius;
    z-index: $z-index;
    @if ($animate == true) {
      transition: transform 250ms;
    }
  }
  @if ($animate == true) {
    @include selectors(active) {
      &:#{$pseudo-element} {
        transform: translate(-($offset - 2), -($offset - 2));
      }
    }
  }
}


@mixin top-border() {
  &:before {
    content: '';
    display: block;
    width: 100%;
    height: rem-calc(10);
    background: $green-gradient;
  }
}

// Text colors schemes
@mixin color-scheme ($scheme: dark) {
  h1, h2, h3, h4, h5, h6, div, p, li {
    color: $white;
  }
}

@mixin play-btn($size: 28) {
  display: block;
  height: rem-calc($size);
  width: rem-calc($size);
  background-image: url(img-get('svg/play-btn.svg'));
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
}

@mixin layout-content-sidebar() {
  @include content-width(default);
  padding-top: 40px;
  margin-bottom: 40px;
  @include breakpoint(marge) {
    padding-top: 85px;
    margin-bottom: 85px;
    display: flex;
    justify-content: space-between;
  }
  > .node--content {
    margin-bottom: 40px;
    @include breakpoint(marge) {
      margin-bottom: 0;
      width: 64%;
      max-width: 650px;
      position: relative;
    }
  }
  > .node--sidebar {
    @include breakpoint(marge) {
      max-width: 250px;
      width: 26%;
    }

    h3 {
      margin-bottom: 12px;
    }
  }
}

@mixin a2a-kit() {
  .a2a_kit {
    margin-bottom: 20px;
    @include breakpoint(marge) {
      position: absolute;
      left: 0;
      top: -45px;
    }
    @include breakpoint(xlarge) {
      width: 32px;
      top: 0;
      left: -90px;
    }
  }
}


@mixin slider-nav() {
  list-style: none;
  margin: 0;
  max-width: rem-calc(520);

  li {
    font-size: rem-calc(13);
    font-weight: $global-weight-bold;
    cursor: pointer;
    margin-bottom: rem-calc(16);
    padding-right: rem-calc(32);
    color: $white;

    .progress-bar {
      width: 100%;
      height: 2px;
      display: block;
      margin-top: rem-calc(8);
      position: relative;

      &:before{
        content: '';
        position: absolute;
        left: 0;
        width: 100%;
        height: 2px;
        background: $white;
        opacity: 0.4;
      }
      span {
        position: absolute;
        display: block;
        width: 0%;
        height: 2px;
        background: $secondary-color-light;
        opacity: 1;
        z-index: 1;
      }
    }

  }

  .slick-track {
    @include left-right(margin, 0);
  }
}

/// Adds border animation
///
/// @param {string} $color - Border color
/// @param {string} $width - Border width
/// @param {string} $hover - Selector for triggering animation
@mixin border-spin($color: $primary-color, $width: 3px, $hover: false){
  position: relative;
  &:before,
  &:after {
    content: '';
    position: absolute;
    width: calc(100% + #{$width * 2});
    height: calc(100% + #{$width * 2});
    top: -$width;
    left: -$width;
    border-radius: 50%;
  }

  &:before {
    border: $width solid transparent;
  }
  &:after {
    border: 0 solid transparent; // Makes border thinner at the edges? I forgot what I was doing
  }
  $trigger-selector: '&:hover';
  @if ($hover) {
    $trigger-selector: $hover;
  }
  #{$trigger-selector} {
    &:before {
      border-top-color: $color; // Show borders
      border-right-color: $color;
      border-bottom-color: $color;

      transition:
        border-top-color 0.15s linear, // Stagger border appearances
        border-right-color 0.15s linear 0.10s,
        border-bottom-color 0.15s linear 0.20s;
    }
    &:after {
      border-top: $width solid $color; // Shows border
      border-left-width: $width; // Solid edges, invisible borders
      border-right-width: $width; // Solid edges, invisible borders
      transform: rotate(270deg); // Rotate around circle
      transition:
        transform 0.4s linear 0s,
        border-left-width 0s linear 0.35s; // Solid edge post-rotation
    }
  }
}
