<?php

/**
 * Use this file to override Drupal's default HTML output
 *
 * 1. Preprocess hooks
 * 2. Theme suggestions
 * 3. Utility functions
 */

use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\block\Entity\Block;
use Drupal\views\Views;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\NodeInterface;
use Drupal\Core\Render\Element;

//*********************************************
// 1. Preprocess hooks
//*********************************************

/**
 * Implements template_preprocess_html().
 */
function themekit_preprocess_html(&$variables) {

  /** @var \Drupal\node\NodeInterface $current_node */
  $current_node = \Drupal::routeMatch()->getParameter('node');

  // Prevent banner from being placed on unlocked Insights.
  if ($current_node && $current_node instanceof \Drupal\node\NodeInterface) {
    if ($current_node->hasField('field_gated') && $current_node->get('field_gated')->value) {

      if (!_e3_content_is_gated($current_node)) {
        return;
      }
    }
  }

  // Place this block programmatically, issues placing within the block ui.
  $variables['page']['content_above']['pagebanner'] = themekit_block_to_renderable_array('pagebanner');
}

/**
 * Implements template_preprocess_node().
 */
function themekit_preprocess_node(&$variables) {
  // Set our own node type preprocess, drupal creates them by default, but seems to only run hook_preprocess_node__event
  // on event full pages, not event teasers as well
  if (!empty($variables['node']) && is_object($variables['node']) && method_exists($variables['node'], 'getType')) {
    //ensure that the node variable exists and is an object
    $function = __FUNCTION__ . '_' . $variables['node']->getType();
    if (function_exists($function)) {
      $function($variables);
    }
  }
}


/**
 * Implements template_preprocess_page().
 */
function themekit_preprocess_page(&$variables) {
}

/**
 * Implements template_preprocess_field().
 */
function themekit_preprocess_field(&$variables) {

}

/**
 * Implements template_preprocess_node_article().
 */
function themekit_preprocess_node_article(&$variables) {
}

function themekit_preprocess_node_insight(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  // Get correct heading for unlocked view mode.
  if (isset($variables['content']['field_p_header'])) {

    $header_items = Element::children($variables['content']['field_p_header']);

    if ($header_items) {
      $first_item = reset($header_items);

      /** @var \Drupal\paragraphs\ParagraphInterface $header */
      $header = $first_item['#paragraph'];

      if ($header && $header->hasField('field_heading') && !$header->get('field_heading')->isEmpty()) {
        $heading = $header->get('field_heading')->getString();
      }
    }
  }

  if (isset($heading)) {
    $variables['heading'] = $heading;
  }
  else {
    $variables['heading'] = $node->getTitle();
  }
  themekit_get_insight_data($node, $variables);
}


/**
 * Implements template_preprocess_media().
 */
function themekit_preprocess_media__svg(&$variables) {

  if (!empty($variables['content']['field_svg'])) {
    $svg_file_entity = $variables['content']['field_svg']['0']['#file'];
    if (is_object($svg_file_entity) && method_exists($svg_file_entity, 'getFileUri')) {
      $variables['svg_url'] = file_create_url($svg_file_entity->getFileUri());
    }
  }
}

/**
 * Paragraphs preprocess.
 */
function themekit_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  // Set our own paragraphs type preprocess, drupal creates them by default, but they seem
  // to only run hook_preprocess_paragraph__simple_content on default view mode,
  // not additional view modes as well
  if (!empty($variables['paragraph']) && is_object($variables['paragraph']) && method_exists($variables['paragraph'], 'getType')) {
    //ensure that the node variable exists and is an object
    $function = __FUNCTION__ . '_' . $variables['paragraph']->getType();
    if (function_exists($function)) {
      $function($variables);
    }
  }

  // Handle bg color.
  $bg_color = '';
  if ($paragraph->hasField('field_bg_color')) {
    $bg_color = themekit_get_term_slug($paragraph, 'field_bg_color');
  }

  $variables['bg_status'] = (empty($bg_color)) ? 'no-bg' : 'with-bg';
  $variables['bg_color'] = (empty($bg_color)) ? 'bg-color-none' : 'bg-color-' . $bg_color;
  $variables['color_scheme'] = 'color-scheme-' . themekit_color_scheme($bg_color);
}

function themekit_preprocess_paragraph_banner_hero(&$variables) {
  $paragraph = $variables['paragraph'];
  $node = $paragraph->getParentEntity();
  themekit_get_insight_data($node, $variables);

  $variables['image_inline_style'] = themekit_get_entity_image_inline_style($paragraph, 'field_media', 'banner_hero');

  $variables['overlay_color'] = themekit_get_term_slug($paragraph, 'field_bg_color') ? themekit_get_term_slug($paragraph, 'field_bg_color') : 'blue';

}

function themekit_preprocess_paragraph_compound_content_bar(&$variables) {
  $paragraph = $variables['paragraph'];

  $variables['column_count'] = $paragraph->get('field_p_compound_content')->count();
}

function themekit_preprocess_paragraph_layout_2_column(&$variables) {
  $paragraph = $variables['paragraph'];
  if ($paragraph->hasField('field_width')) {
    $variables['width'] = $paragraph->field_width->getValue()[0]['value'];
  }
}

/**
 * Implements template_preprocess_media().
 */

function themekit_preprocess_paragraph_media_image(&$variables) {
  /* @var $paragraph Drupal\paragraphs\Entity\Paragraph */
  $paragraph = $variables['paragraph'];

  // Do contextual adjustments to image (image style or background image if necessary)
  // Identify the implementing bundle and use any additional conditions as well and add either `image_inline_style` or `custom_image_style` var
  $parent = $paragraph->getParentEntity();
  if ($parent->getEntityTypeId() === 'paragraph') {
    switch ($parent->getType()) {
      case 'simple_stat':
        $uri = $paragraph->field_media_image->entity->field_image->entity->getFileUri();
        $variables['custom_image_style'] = [
          '#theme' => 'image_style',
          '#style_name' => 'stat',
          '#uri' => $uri,
        ];
        break;
      case 'layout_2_column':
        $uri = $paragraph->field_media_image->entity->field_image->entity->getFileUri();
        $variables['custom_image_style'] = [
          '#theme' => 'image_style',
          '#style_name' => 'half_column',
          '#uri' => $uri,
        ];
        break;
    }
  }
}

//*********************************************
// 2. Theme suggestions
//*********************************************

/**
 * Implements template_theme_suggestions_HOOK_alter().
 */
function themekit_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $field_name = !empty($variables['element']['#field_name']) ? $variables['element']['#field_name'] : '';
  $type = !empty($variables['element']['#entity_type']) ? $variables['element']['#entity_type'] : '';
  $bundle = !empty($variables['element']['#bundle']) ? $variables['element']['#bundle'] : '';
  $is_paragraph = ($type == 'paragraph');
  $entity = $variables['element']['#object'];

  $large_heading = FALSE;
  if ($is_paragraph && $bundle === 'banner_hero' && $entity->hasField('field_use_large_heading') && $entity->field_use_large_heading->value) {
    $large_heading = TRUE;
  }

  // Apply theme suggestions based on field name.
  switch($field_name) {
    case 'field_p_content':
    case 'field_p_header':
      // Remove all field markup so only the field value markup is output.
      array_unshift($suggestions, 'field__no_wrapper');
      break;
    case 'field_p_column':
      // Remove field item wrappers.
      array_unshift($suggestions, 'field__reset');
      break;
  }

  // Apply theme suggestions for "field_heading" based on paragraph bundle.
  if ($field_name == 'field_heading' && $is_paragraph) {
    switch($bundle) {
      case 'banner_hero':
        array_unshift($suggestions, $large_heading ? 'field__heading_5' : 'field__heading_1');
        break;
      case 'compound_content_bar':
      case 'layout_2_column':
      case 'simple_cta':
        array_unshift($suggestions, 'field__heading_2');
        break;
      case 'simple_content':
      case 'single_heading':
      case 'summary_insights':
        array_unshift($suggestions, 'field__heading_3');
        break;
    }
  }
  if ($field_name == 'field_large_heading' && $is_paragraph) {
    switch($bundle) {
      case 'banner_hero':
        $suggestions[] = $large_heading ? 'field__heading_1' : 'field__heading_3';
        break;
    }
  }

  switch ($type) {
    case 'contact_message':
      $suggestions[] = 'field__' . $type;
      $suggestions[] = 'field__' . $type . '__' . $variables['element']['#field_type'];
      break;
  }

  if ($entity) {

  $parent_field = $variables['element']['#object']->parent_field_name;
  if ($parent_field) {

      $parent_field = $variables['element']['#object']->parent_field_name->getValue()[0]['value'];
      // Check if this was part of the layout component
      if ($parent_field == 'field_p_layout_content') {
        switch($bundle) {
          case 'simple_content':
            if ($field_name == 'field_heading') {
              $suggestions[] = 'field__heading_2';
            }
            break;
        }
      }
    }
  }
}

/**
 * Implements template_theme_suggestions_HOOK_alter().
 */
function themekit_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

//*********************************************
// 3. Utility functions
//*********************************************

/**
 * Utility function to get the inline css style for a background image.
 *
 * @param $entity
 *  Entity containing the image field.
 * @param $field_name
 *  Name of the image field to use.
 * @param $image_style
 *  Name of the image style to use.
 * @return string
 *  Full css style attribute containing background image.
 */
function themekit_get_entity_image_inline_style($entity, $field_name, $image_style = null) {
  $rendered_style = '';

  if (!$entity->$field_name->isEmpty()) {
    $file_entity = $entity->get($field_name)->entity->get('field_image')->entity;

    if ($url = themekit_get_image_style_url($file_entity, $image_style)) {
      $rendered_style = 'style="background-image: url(' . $url . ');"';
    }
  }

  return $rendered_style;
}

/**
 * Get the url for a specific image style of an image.
 *
 * @param File $file
 *  Image to be used.
 * @param $image_style
 *  Name of the image style to use.
 * @return string
 */
function themekit_get_image_style_url(File $file, $image_style = null) {
  $uri = $file->getFileUri();
  if ($image_style) {
    $url = ImageStyle::load($image_style)->buildUrl($uri);
  } else {
    $url = file_create_url($uri);
  }
  return $url;
}


/**
 * Get a renderable array from a block ID
 *
 * @param $block_id
 * @param null $weight
 *  Optional weight parameter, useful if you are dumping this into a region and need to negotiate its position
 * @return array
 */
function themekit_block_to_renderable_array($block_id, $weight = null) {
  $block = Block::load($block_id);
  if (is_null($block)) return [];
  $block_content = \Drupal::entityTypeManager()
    ->getViewBuilder('block')
    ->view($block);

  // set weight
  if (isset($weight)) {
    $block_content['#weight'] = $weight;
  }

  return $block_content;
}


/**
 * Utility function to create a renderable array from a view
 *
 * @param $view_id
 *  The view machine name id
 * @param $view_display
 *  The display machine name id
 * @param null $view_title
 *  Optionally add the view title
 *
 * @return mixed
 *  The view as a renderable array
 */
function themekit_view_to_renderable_array($view_id, $view_display, $view_title = null) {
  // set title
  $view = Views::getView($view_id);
  $view->setDisplay($view_display);

  if (isset($view_title)) {
    $view_content['title'] = [
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => $view->getTitle(),
      '#attributes' => [
        'class' => 'view-title',
      ],
    ];
  }
  $view_content['content'] = views_embed_view($view_id, $view_display);

  return $view_content;
}

function themekit_get_term_slug($paragraph, $field) {
  if ($paragraph->hasField($field)) {
    if (!empty($term = $paragraph->$field->getValue())) {
      return Term::load($term[0]['target_id'])->field_slug->value;
    }
  }
}

function themekit_get_insight_data(NodeInterface $node, &$variables) {
  $bundle = $node->bundle();

  if ($bundle === 'insight') {
    if (!$node->get('field_insight_type')->isEmpty()) {
      $type = $node->get('field_insight_type')->first()->entity->label();
      $variables['insight_type'] = $type;
      if ($type === 'webinar') {
        $variables['insight_date'] = ''; // @todo Add webinar date
      } else {
        $variables['insight_date'] = date('M j, Y', $node->getCreatedTime());
      }

    }
  }
}

function themekit_color_scheme($color) {
  $color_scheme = 'light';

  $dark_colors = [
    'blue',
    'green',
    'navy',
    'orange',
    'purple',
  ];

  if (in_array($color, $dark_colors)) {
    $color_scheme = 'dark';
  }

  return $color_scheme;
}
