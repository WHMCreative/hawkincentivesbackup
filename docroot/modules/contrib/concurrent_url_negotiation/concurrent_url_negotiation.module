<?php

/**
 * @file
 * Implements hooks.
 */

use Drupal\concurrent_url_negotiation\Plugin\LanguageNegotiation\LanguageNegotiationConcurrentUrl;
use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationUrl;
use Drupal\Core\Url;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_language_negotiation_info_alter().
 */
function concurrent_url_negotiation_language_negotiation_info_alter(array &$negotiationInfo) {
  // When negotiator plugins are discovered replace core URL with ours.
  $overrideMethod = LanguageNegotiationConcurrentUrl::METHOD_ID;
  $coreMethod = LanguageNegotiationUrl::METHOD_ID;

  $negotiationInfo[$coreMethod] = $negotiationInfo[$overrideMethod];
  $negotiationInfo[$coreMethod]['id'] = $coreMethod;
  unset($negotiationInfo[$overrideMethod]);
}

/**
 * Implements hook_page_attachments().
 */
function concurrent_url_negotiation_page_attachments(array &$attachments) {
  /** @var \Drupal\concurrent_url_negotiation\ConcurrentUrlNegotiationConfig $negotiationConfig */
  $negotiationConfig = \Drupal::service('concurrent_url_negotiation.config');

  // Attach cross authentication client side handler, but only if it is enabled.
  if (
    $negotiationConfig->isCrossAuthPossible() &&
    $negotiationConfig->isCrossAuthEnabled() &&
    !\Drupal::currentUser()->isAnonymous()
  ) {
    $attachments['#attached']['library'][] = 'concurrent_url_negotiation/cross-auth';
    $attachments['#attached']['drupalSettings']['crossAuth'] = [
      'getTokenUrl' => Url::fromRoute('concurrent_url_negotiation.get_auth_token')->toString(),
      'domains' => $negotiationConfig->getDistinctDomains(),
    ];
  }
}

/**
 * Implements hook_cron().
 */
function concurrent_url_negotiation_cron() {
  \Drupal::service('concurrent_url_negotiation.cross_auth')->cleanExpired();
}

/**
 * Implements hook_user_logout().
 */
function concurrent_url_negotiation_user_logout($account) {
  \Drupal::service('concurrent_url_negotiation.cross_auth')->logoutSessionFamily();
}

/**
 * Implements hook_help().
 */
function concurrent_url_negotiation_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.concurrent_url_negotiation':
      $text = file_get_contents(dirname(__FILE__) . "/README.txt");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = array('settings' => $settings);
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}
