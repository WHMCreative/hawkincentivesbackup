<?php

/**
 * @file
 * Implements hooks.
 */

use Drupal\concurrent_url_negotiation\ConcurrentUrlNegotiationConfig;

/**
 * Implements hook_install().
 */
function concurrent_url_negotiation_install() {
  // Upon installation initiate default dynamic configurations.
  /** @var ConcurrentUrlNegotiationConfig $config */
  $config = \Drupal::service('concurrent_url_negotiation.config');

  // If the module is first installed then we need to put initial config.
  if (empty($config->getNegotiations())) {
    $languages = \Drupal::languageManager()->getLanguages();
    $domain = \Drupal::request()->getHost();

    // Handle the case if it's installed from drush.
    if ($domain == 'default') {
      $domain = ConcurrentUrlNegotiationConfig::DOMAIN_ANY;
    }

    $fullUrls = [];
    foreach ($languages as $language) {
      $fullUrls[$language->getId()] = [
        'domain' => $domain,
        'prefixes' => [$language->getId()],
      ];
    }

    $config->setNegotiations($fullUrls);
  }
}

/**
 * Implements hook_schema().
 */
function concurrent_url_negotiation_schema() {
  $schema['users_cross_auth'] = [
    'description' => 'Stores cross domain authentication tokens and additional security information.',
    'fields' => [
      'id' => [
        'description' => 'Used for faster querying.',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ],
      'token' => [
        'description' => 'The secret token that will allow the user to be authenticated.',
        'type' => 'varchar',
        'length' => 128,
        'unique' => TRUE,
        'not null' => TRUE,
      ],
      'user_id' => [
        'description' => 'User universal unique id.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ],
      'ip' => [
        'description' => 'IP of the generate request for additional security.',
        'type' => 'varchar',
        'length' => 15,
        'not null' => TRUE,
      ],
      'session_family_id' => [
        'description' => 'For which session family was this token generated.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ],
      'created' => [
        'description' => 'The timestamp for when this token was created.',
        'type' => 'int',
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['id'],
  ];

  $schema['users_session_family'] = [
    'description' => 'Stores session clusters per user login. Each row originates from one session/login.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ],
      'sessions' => [
        'description' => 'Sibling sessions separated by slash (/).',
        'type' => 'text',
        'not null' => TRUE,
      ],
      'expires' => [
        'description' => 'Used to check if the session have expired.',
        'type' => 'int',
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['id'],
  ];

  return $schema;
}
