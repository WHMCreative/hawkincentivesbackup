<?php

/**
 * @file
 * Contains bhk_micro_quiz.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_help().
 */
function bhk_micro_quiz_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the bhk_micro_quiz module.
    case 'help.page.bhk_micro_quiz':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides the MicroQuiz entity and corresponding functionality for BHK project') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function bhk_micro_quiz_theme() {
  $theme = [];
  $theme['micro_quiz'] = [
    'render element' => 'elements',
    'file' => 'micro_quiz.page.inc',
    'template' => 'micro-quiz',
  ];
  $theme['micro_quiz_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'micro_quiz.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function bhk_micro_quiz_theme_suggestions_micro_quiz(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#micro_quiz'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = "micro_quiz__{$sanitized_view_mode}";
  $suggestions[] = "micro_quiz__{$entity->bundle()}";
  $suggestions[] = "micro_quiz__{$entity->bundle()}__{$sanitized_view_mode}";
  $suggestions[] = "micro_quiz__{$entity->id()}";
  $suggestions[] = "micro_quiz__{$entity->id()}__{$sanitized_view_mode}";
  return $suggestions;
}

/**
 * Preprocess MicroQuiz templates.
 *
 * @param array $variables
 *   Template variables.
 */
function bhk_micro_quiz_preprocess_micro_quiz(array &$variables) {
  /** @var \Drupal\bhk_micro_quiz\Entity\MicroQuizEntityInterface $micro_quiz */
  $micro_quiz = $variables['elements']['#micro_quiz'];
  $bundle = $micro_quiz->bundle();
  $variables['bundle'] = $bundle;

  $current_route = \Drupal::routeMatch()->getRouteName();

  if ($current_route === 'entity.node.canonical' && $bundle === 'answer' && !$variables['attributes']) {

    // Set helper data attributes for microquiz answers.
    if ($variables['attributes'] instanceof Attribute) {
      $variables['attributes']->setAttribute('data-marketo-value', $micro_quiz->get('field_marketo_value')->value);
      $variables['attributes']->setAttribute('data-answer-id', $micro_quiz->id());
    }
    else {
      $variables['attributes']['data-marketo-value'] = $micro_quiz->get('field_marketo_value')->value;
      $variables['attributes']['data-answer-id'] = $micro_quiz->id();
    }
  }
}

/**
 * Preprocess MicroQuiz-related component templates.
 *
 * @param array $variables
 *   Template variables.
 */
function bhk_micro_quiz_preprocess_paragraph(array &$variables) {
  $bundle = $variables['paragraph']->bundle();

  $current_route = \Drupal::routeMatch()->getRouteName();

  if ($current_route === 'entity.node.canonical') {

    // Build a form step for each quiz question.
    if ($bundle === 'microquiz_question') {
      $question_form = \Drupal::formBuilder()
        ->getForm('Drupal\bhk_micro_quiz\Form\MicroQuizQuestionForm', $variables);

      $variables['content'] = $question_form;

      if ($question_form['step']['#value'] === 'active') {
        $variables['attributes'] = new Attribute(['class' => 'active-question']);
      }
      else {
        $variables['attributes'] = new Attribute(['class' => 'hidden']);
      }
    }

    if ($bundle === 'microquiz_quiz') {

      // Attach appropriate js library to the quiz.
      $variables['content']['field_p_questions']['#attached']['library'][] = 'bhk_micro_quiz/micro-quiz';

      // Load quiz results immediately if cookies have been set.
      $request = \Drupal::requestStack()->getCurrentRequest();
      $cookies = $request->cookies;

      $mq_answers = $cookies->get('mq_answers');

      if ($mq_answers) {
        $answers = explode(',', $mq_answers);
        $output['#markup'] = \Drupal::service('bhk_micro_quiz.quiz_helper')->getSurveyResult($answers);
        $variables['content'] = $output;
      }
    }
  }
}
