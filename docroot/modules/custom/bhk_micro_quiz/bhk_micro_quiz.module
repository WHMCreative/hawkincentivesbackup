<?php

/**
 * @file
 * Contains bhk_micro_quiz.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Url;
use Drupal\Core\Render\Element;

/**
 * Implements hook_help().
 */
function bhk_micro_quiz_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the bhk_micro_quiz module.
    case 'help.page.bhk_micro_quiz':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides the MicroQuiz entity and corresponding functionality for BHK project') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function bhk_micro_quiz_theme() {
  $theme = [];
  $theme['micro_quiz'] = [
    'render element' => 'elements',
    'file' => 'micro_quiz.page.inc',
    'template' => 'micro-quiz',
  ];
  $theme['micro_quiz_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'micro_quiz.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function bhk_micro_quiz_theme_suggestions_micro_quiz(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#micro_quiz'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'micro_quiz__' . $sanitized_view_mode;
  $suggestions[] = 'micro_quiz__' . $entity->bundle();
  $suggestions[] = 'micro_quiz__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'micro_quiz__' . $entity->id();
  $suggestions[] = 'micro_quiz__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Preprocess micro_quiz templates.
 *
 * @param array $variables
 */
function bhk_micro_quiz_preprocess_micro_quiz(array &$variables) {
  $variables['bundle'] = $variables['elements']['#micro_quiz']->bundle();
}

function bhk_micro_quiz_paragraph_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() === 'microquiz_quiz' && isset($build['field_p_questions'])) {

    $build['#attached']['library'][] = 'bhk_micro_quiz/micro-quiz';

    $question_keys = Element::children($build['field_p_questions']);
    $total_questions = count($question_keys);

    $last_question = FALSE;

    foreach ($question_keys as $key) {
      if ($key === end($question_keys)) {
        $last_question = TRUE;
      }

      $current = $key + 1;

      $action_component = [
        '#type' => 'container',
        '#attributes' => [
          'class' => ['quiz-action-wrapper']
        ],
        'link' => [
          '#type' => 'link',
          '#title' => $last_question ? t('Get Results!') : t('Next'),
          '#url' => Url::fromRoute('<current>'),
          '#attributes' => [
            'class' => $last_question ? 'quiz-action-finish disabled' : 'quiz-action-next disabled',
          ],
        ],
        'current_step' => [
          '#type' => 'container',
          '#markup' => "{$current} of {$total_questions}",
          '#attributes' => [
            'class' => 'quiz-current-step'
          ],
        ]
      ];

      $build['field_p_questions'][$key]['#suffix'] = \Drupal::service('renderer')->render($action_component);

      $build['field_p_questions'][$key] = [
        '#type' => 'container',
        "question_{$key}" => $build['field_p_questions'][$key],
      ];

      if ($key === reset($question_keys)) {
        $question_class = 'active-question';
      }
      else {
        $question_class = 'hidden';
      }

      $build['field_p_questions'][$key]['#attributes']['class'] = [$question_class, 'quiz-question-wrapper'];
    }
  }
}

function bhk_micro_quiz_micro_quiz_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() === 'answer' && $entity->hasField('field_marketo_value')) {
    $build['#attributes']['data-marketo-value'] = $entity->get('field_marketo_value')->value;
  }
}